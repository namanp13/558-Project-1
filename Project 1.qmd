---
title: "Project 1"
format: pdf
editor: visual
---

## Define libraries needed

```{r}
library(readr)
library(dplyr)
library(tidyr)
```

## Data Processing

### First steps: Read in the data

```{r}
census_data <- read_csv("EDU01a.csv")
```

### Question 1: Select only the columns: Area_name, STCOU, and any coulumn that ends in "D". Only display the first 5 rows

```{r}
census_data_2 <- census_data |>
  select(Area_name, STCOU, ends_with("D")) |>
  rename(area_name = Area_name)

head(census_data_2, 5)
```

### Question 2: Convert out data into long format where each row has only one enrollment value for that Area_name.

```{r}
census_data_3 <- census_data_2 |>
  pivot_longer(cols = ends_with("D"), names_to = "code_year",
  values_to = "total_enrolled"
  )

head(census_data_3, 5)
```

### Question 3: Parse the string to pull out the year and convert the year into a numeric value. Grab the first three characters and following four digits to create a new variable representing which measurement was grabbed.

```{r}
long_updated <- census_data_3 |>
  mutate(year = 1900 + as.numeric(substr(code_year, 8, 9)),
         new_measure = substr(code_year, 1, 7))

head(long_updated, 5)
```

### Question 4: Create two data sets: one containing only non-count data, one containing only county level data

```{r}
split_data <- grep(pattern = ", \\w\\w", long_updated$area_name)

county_tibble <- long_updated |>
  slice(split_data)
class(county_tibble) <- c("county", class(county_tibble))

state_tibble <- long_updated |>
  slice(-split_data)
class(state_tibble) <- c("state", class(state_tibble))

head(county_tibble, 10)
head(state_tibble, 10)
```

### Question 5: Creating a new variable for the county level tibble that describes which state one of the county measurements corresponds to

```{r}
new_county_tibble <- county_tibble |>
  mutate(State = substr(area_name, start = nchar(area_name) -1 ,
                        stop = nchar(area_name)))

head(new_county_tibble, 5)
```

### Question 6: Creating a new variable called "divison" for the non-county tibble that corresponds to the state's classification of division

```{r}
noncounty_tibble_new <- state_tibble |>
  mutate(division = case_when (
    area_name %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT") ~ "New England",
      area_name %in% c("NEW JERSEY", "NEW YORK", "PENNSYLVANIA") ~ "Mid-Atlantic",
      area_name %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN") ~ "East North Central",
      area_name %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA") ~ "West North Central",
      area_name %in% c("DELAWARE", "FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", "WEST VIRGINIA", "DISTRICT OF COLUMBIA") ~ "South Atlantic",
      area_name %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE") ~ "East South Central",
      area_name %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS") ~ "West South Central",
      area_name %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA", "NEW MEXICO", "UTAH", "WYOMING") ~ "Mountain",
      area_name %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON") ~ "Pacific",
      TRUE ~ "ERROR"))

head(noncounty_tibble_new, 5)
```

## Requirements

### Reading in data

```{r}
census_data_b <- read_csv("EDU01b.csv")
```

### Function 1: Steps 1 and 2

```{r}

func_1 <- function(df, value_name = "students_enrolled") {
  df_1 <- df |>
    select(
      area_name = Area_name,
      STCOU,
      ends_with("D")
    )
  df_long <- df_1 |>
    pivot_longer(
      cols = ends_with("D"),
      names_to = "code_year",
      values_to = "total_enrolled"
    )
  return(df_long)
}

```

### Function 2: Step 3

```{r}
func_2 <- function(df_long){
  long_updated <- df_long |>
    mutate(year = 1900 + as.numeric(substr(code_year, 8, 9)),
         new_measure = substr(code_year, 1, 7))
  return(long_updated)
}

```

### Function 3: Step 5
```{r}

func_3 <- function(county_tibble){
  county_tibble |>
    mutate(State = substr(area_name, start = nchar(area_name) -1 ,
                        stop = nchar(area_name)))
}

```

### Function 4: Step 6
```{r}

func_4 <- function(state_tibble){
   state_tibble |>
    mutate(division = case_when (
    area_name %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT") ~ "New England",
      area_name %in% c("NEW JERSEY", "NEW YORK", "PENNSYLVANIA") ~ "Mid-Atlantic",
      area_name %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN") ~ "East North Central",
      area_name %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA") ~ "West North Central",
      area_name %in% c("DELAWARE", "FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", "WEST VIRGINIA", "DISTRICT OF COLUMBIA") ~ "South Atlantic",
      area_name %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE") ~ "East South Central",
      area_name %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS") ~ "West South Central",
      area_name %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA", "NEW MEXICO", "UTAH", "WYOMING") ~ "Mountain",
      area_name %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON") ~ "Pacific",
      TRUE ~ "ERROR"))
}
  
```

### Function 5
```{r}

func_5 <- function(long_updated){
  split_data <- grep(pattern = ", \\w\\w", long_updated$area_name)
  
  county_tibble <- long_updated |>
  slice(split_data) |>
    func_3() 
class(county_tibble) <- c("county", class(county_tibble))
  
state_tibble <- long_updated |>
  slice(-split_data) |>
  func_4() 
class(state_tibble) <- c("state", class(state_tibble))  

return(list(county_tibble, state_tibble))
}
```

### Wrapper Function

```{r}
my_wrapper <- function(url, default_var_name = "students_enrolled"){
df <-  read_csv(url)

df_long <- func_1(df) 

long_updated <- func_2(df_long) 

result <- func_5(long_updated)

return(result)
}

```

### Use wrapper function for both data files

```{r}
census_a <- my_wrapper("EDU01a.csv")

census_b <- my_wrapper("EDU01b.csv")
```

### Function to combine tibbles
```{r}
combine_function <- function(wrapper_a, wrapper_b){
  
  combined_county <- bind_rows(wrapper_a[[1]], wrapper_b[[1]])
  
  combined_state <- bind_rows(wrapper_a[[2]], wrapper_b[[2]])

return(list(county = combined_county, state = combined_state))
}

combine_function(census_a, census_b)
```

## Writing a Generic Function for Summarizing


