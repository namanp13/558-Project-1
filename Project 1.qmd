---
title: "Project 1"
format: pdf
editor: visual
---

## Define libraries needed

```{r}
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
```

## Data Processing

### First steps: Read in the data

```{r}
census_data <- read_csv("EDU01a.csv")
```

### Question 1: Select only the columns: Area_name, STCOU, and any coulumn that ends in "D". Only display the first 5 rows

```{r}
census_data_2 <- census_data |>
  select(Area_name, STCOU, ends_with("D")) |>
  rename(area_name = Area_name)

head(census_data_2, 5)
```

### Question 2: Convert out data into long format where each row has only one enrollment value for that Area_name.

```{r}
census_data_3 <- census_data_2 |>
  pivot_longer(cols = ends_with("D"), names_to = "code_year",
  values_to = "total_enrolled"
  )

head(census_data_3, 5)
```

### Question 3: Parse the string to pull out the year and convert the year into a numeric value. Grab the first three characters and following four digits to create a new variable representing which measurement was grabbed.

```{r}
long_updated <- census_data_3 |>
  mutate(year = 1900 + as.numeric(substr(code_year, 8, 9)),
         new_measure = substr(code_year, 1, 7))

head(long_updated, 5)
```

### Question 4: Create two data sets: one containing only non-count data, one containing only county level data

```{r}
split_data <- grep(pattern = ", \\w\\w", long_updated$area_name)

county_tibble <- long_updated |>
  slice(split_data)
class(county_tibble) <- c("county", class(county_tibble))

state_tibble <- long_updated |>
  slice(-split_data)
class(state_tibble) <- c("state", class(state_tibble))

head(county_tibble, 10)
head(state_tibble, 10)
```

### Question 5: Creating a new variable for the county level tibble that describes which state one of the county measurements corresponds to

```{r}
new_county_tibble <- county_tibble |>
  mutate(State = substr(area_name, start = nchar(area_name) -1 ,
                        stop = nchar(area_name)))

head(new_county_tibble, 5)
```

### Question 6: Creating a new variable called "divison" for the non-county tibble that corresponds to the state's classification of division

```{r}
noncounty_tibble_new <- state_tibble |>
  mutate(division = case_when (
    area_name %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT") ~ "New England",
      area_name %in% c("NEW JERSEY", "NEW YORK", "PENNSYLVANIA") ~ "Mid-Atlantic",
      area_name %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN") ~ "East North Central",
      area_name %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA") ~ "West North Central",
      area_name %in% c("DELAWARE", "FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", "WEST VIRGINIA", "DISTRICT OF COLUMBIA") ~ "South Atlantic",
      area_name %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE") ~ "East South Central",
      area_name %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS") ~ "West South Central",
      area_name %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA", "NEW MEXICO", "UTAH", "WYOMING") ~ "Mountain",
      area_name %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON") ~ "Pacific",
      TRUE ~ "ERROR"))

head(noncounty_tibble_new, 5)
```

## Requirements

### Reading in data

```{r}
census_data_b <- read_csv("EDU01b.csv")
```

### Function 1: Steps 1 and 2

```{r}

func_1 <- function(df, value_name = "students_enrolled") {
  df_1 <- df |>
    select(
      area_name = Area_name,
      STCOU,
      ends_with("D")
    )
  df_long <- df_1 |>
    pivot_longer(
      cols = ends_with("D"),
      names_to = "code_year",
      values_to = "total_enrolled"
    )
  return(df_long)
}

```

### Function 2: Step 3

```{r}
func_2 <- function(df_long){
  long_updated <- df_long |>
    mutate(year = 1900 + as.numeric(substr(code_year, 8, 9)),
         new_measure = substr(code_year, 1, 7))
  return(long_updated)
}

```

### Function 3: Step 5
```{r}

func_3 <- function(county_tibble){
  county_tibble |>
    mutate(State = substr(area_name, start = nchar(area_name) -1 ,
                        stop = nchar(area_name)))
}

```

### Function 4: Step 6
```{r}

func_4 <- function(state_tibble){
   state_tibble |>
    mutate(division = case_when (
    area_name %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT") ~ "New England",
      area_name %in% c("NEW JERSEY", "NEW YORK", "PENNSYLVANIA") ~ "Mid-Atlantic",
      area_name %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN") ~ "East North Central",
      area_name %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA") ~ "West North Central",
      area_name %in% c("DELAWARE", "FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", "WEST VIRGINIA", "DISTRICT OF COLUMBIA") ~ "South Atlantic",
      area_name %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE") ~ "East South Central",
      area_name %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS") ~ "West South Central",
      area_name %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA", "NEW MEXICO", "UTAH", "WYOMING") ~ "Mountain",
      area_name %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON") ~ "Pacific",
      TRUE ~ "ERROR"))
}
  
```

### Function 5
```{r}

func_5 <- function(long_updated){
  split_data <- grep(pattern = ", \\w\\w", long_updated$area_name)
  
  county_tibble <- long_updated |>
  slice(split_data) |>
    func_3() 
class(county_tibble) <- c("county", class(county_tibble))
  
state_tibble <- long_updated |>
  slice(-split_data) |>
  func_4() 
class(state_tibble) <- c("state", class(state_tibble))  

return(list(county_tibble, state_tibble))
}
```

### Wrapper Function

```{r}
my_wrapper <- function(url, default_var_name = "students_enrolled"){
df <-  read_csv(url)

df_long <- func_1(df) 

long_updated <- func_2(df_long) 

result <- func_5(long_updated)

return(result)
}

```

### Use wrapper function for both data files

```{r}
census_a <- my_wrapper("EDU01a.csv")

census_b <- my_wrapper("EDU01b.csv")
```

### Function to combine tibbles
```{r}
combine_function <- function(wrapper_a, wrapper_b){
  
  combined_county <- bind_rows(wrapper_a[[1]], wrapper_b[[1]])
  
  combined_state <- bind_rows(wrapper_a[[2]], wrapper_b[[2]])

return(list(county = combined_county, state = combined_state))
}

combine_function(census_a, census_b)
```

## Writing a Generic Function for Summarizing

```{r}
plot.state <- function(df, var_name = "total_enrolled") {
  new_df <- df |>
    filter(division != "ERROR")

  mean_df <- new_df |>
    group_by(division, year) |>
    summarize(mean_stat = mean(get(var_name), na.rm = TRUE))
  ggplot(mean_df, aes(x = year, y = mean_stat, color = division)) +
    geom_line() + geom_point() + labs(title = "Mean of Enrollment by Division (Non-County)")}
```

## Generic function for the county tibble

```{r}
plot.county <- function(df, var_name = "total_enrolled", state_of_interest = "NC", top_bottom = "top", num_top_bottom = 5) {
  
  df_state <- df |>
    filter(State == state_of_interest)
  
  county_mean <- df_state |>
    group_by(area_name) |>
    summarize(mean_val = mean(get(var_name), na.rm = TRUE))
  
  if(top_bottom == "top") {
    select_county <- county_mean |>
      arrange(desc(mean_val)) |>
      head(num_top_bottom) |>
      pull(area_name)
  } else if (top_bottom == "bottom") {
    select_county <- county_mean |>
      arrange(mean_val) |>
      head(num_top_bottom) |>
      pull(area_name)
  }
  plotting_data <- df_state |>
    filter(area_name %in% select_county)
  
  ggplot(plotting_data, aes(x = year, y = .data[[var_name]], color = area_name)) + geom_line() + geom_point() + labs(title = "Enrollment Over Time")
}
```

## Put It Together

### Run your data processing function on the two enrollment URLs given previously, specifying an appropriate name for the enrollment data column.

```{r}

census_a <- my_wrapper("EDU01a.csv")

census_b <- my_wrapper("EDU01b.csv")

```
### Run your data combining function to put these into one object (with two data frames)
```{r}
combine_function(census_a, census_b)[[1]]

combine_function(census_a, census_b)[[2]]

```
### Use the plot function on the state data frame
```{r}

plot.state(combine_function(census_a, census_b)[[2]])

```
### Use the plot function on the county data frame

#### Once specifying the state to be “NC”, the group being the top, the number looked at being 20

```{r}
plot.county(combine_function(census_a, census_b)[[1]], num_top_bottom = 20)

```
#### Once specifying the state to be “SC”, the group being the bottom, the number looked at being 7
```{r}

plot.county(combine_function(census_a, census_b)[[1]], num_top_bottom = 7, state_of_interest = "SC", top_bottom = "bottom")

```
#### Once without specifying anything (defaults used)
```{r}
plot.county(combine_function(census_a, census_b)[[1]])
```
#### Once specifying the state to be “PA”, the group being the top, the number looked at being 8
```{r}

plot.county(combine_function(census_a, census_b)[[1]], num_top_bottom = 8, state_of_interest = "PA")

```
### Applying Features to New Data Sets

#### Run your data processing function on the four data sets at URLs given below:

```{r}

PST_data_a <- my_wrapper("PST01a.csv")

PST_data_b <- my_wrapper("PST01b.csv")

PST_data_c <- my_wrapper("PST01c.csv")

PST_data_d <- my_wrapper("PST01d.csv")

```
#### Run your data combining function (probably three times) to put these into one object (with two data frames)
```{r}
PST_data_ab <- combine_function(PST_data_a, PST_data_b)

PST_data_abc <- combine_function(PST_data_ab, PST_data_c)

PST_data_abcd <- combine_function(PST_data_abc, PST_data_d)
```

#### Use the plot function on the state data frame

```{r}

plot.state(PST_data_abcd[[2]])

```
#### Use the plot function on the county data frame

##### Once specifying the state to be “CA”, the group being the top, the number looked at being 15
```{r}
plot.county(PST_data_abcd[[1]], state_of_interest = "CA", num_top_bottom = 15)
```
##### Once specifying the state to be “TX”, the group being the top, the number looked at being 4
```{r}
plot.county(PST_data_abcd[[1]], state_of_interest = "TX", num_top_bottom = 4)
```
##### Once without specifying anything (defaults used)
```{r}
plot.county(PST_data_abcd[[1]])
```
##### Once specifying the state to be “NY”, the group being the top, the number looked at being 10
```{r}

plot.county(PST_data_abcd[[1]], state_of_interest = "NY", num_top_bottom = 10)

```


